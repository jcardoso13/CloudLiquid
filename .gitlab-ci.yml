stages:
  - build
  - test
  - analysis
#  - package

#variables:
#  DOTNET_VERSION: "6.0"


default:
  image: mcr.microsoft.com/dotnet/sdk:latest


# The Build stage
build:
  stage: build
#  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}
  script:
    - echo "Restoring dependencies..."
    - dotnet restore
    - echo "Building the project..."
    - dotnet build --configuration Release --no-restore
  artifacts:
    paths:
      - bin/Release/
    expire_in: 1 week

# The Test stage
test:
  stage: test
#  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}
  script:
    - echo "Running tests..."
    - dotnet test --configuration Release --logger:trx --results-directory TestResults --no-build --verbosity normal
  dependencies:
    - build
  artifacts:
    reports:
      junit: TestResults/*.trx
    paths:
      - TestResults/
    expire_in: 1 week


# Code Analysis stage

code-analysis:
  stage: analysis

  image: sonarsource/sonar-scanner-cli:latest

  script:
    - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY
                    -Dsonar.sources=.
                    -Dsonar.host.url=$SONAR_HOST_URL
                    -Dsonar.login=$SONAR_LOGIN
  dependencies:
    - build
  only:
    - main



#sonarqube-check:
#  image: mcr.microsoft.com/dotnet/core/sdk:latest
#  variables:
#    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script: 
#      - "apt-get update"
#      - "apt-get install --yes openjdk-11-jre"
#      - "dotnet tool install --global dotnet-sonarscanner"
#      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
#      - "dotnet sonarscanner begin /k:\"Clusters-CLOUD\" /d:sonar.login=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
#      - "dotnet build"
#      - "dotnet sonarscanner end /d:sonar.login=\"$SONAR_TOKEN\""
#  allow_failure: true
#  only:
#    - merge_requests
#    - main



# The Package stage
#package:
#  stage: package
#  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}
#  script:
#    - echo "Packing the project..."
#    - dotnet pack --configuration Release --output ./nupkg
#  artifacts:
#    paths:
#      - nupkg/
#    expire_in: 1 week

# The Publish stage (commented out for future use)
# publish:
#   stage: publish
#   image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}
#   script:
#     - echo "Publishing the package to NuGet.org..."
#     - dotnet nuget push ./nupkg/*.nupkg -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json
#   only:
#     - main
